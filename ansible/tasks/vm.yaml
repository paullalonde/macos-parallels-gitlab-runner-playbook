---

- name: Retrieve user list
  become: true
  command: prlsrvctl user list --output name,def_vm_home --no-header
  register: parallels_user_list
  changed_when: false

- name: Get default VM path
  set_fact:
    root_parallels_home: "{{ parallels_user_list.stdout | regex_search('root@\\.\\s+([^\\s]+)', '\\1') | first }}"

# The cleanup code might seem overly complex, but it needs to handle two situations:
#   1. The Gitlab executor creates its own Parallels VMs and VM templates.
#      They aren't controlled by Ansible, but we need to clean them up, or else they'll just accumulate.
#   2. If the executor VM's name changes between plays, we need to clean up the old VM.

- name: Clean up existing VMs
  become: true
  block:
    - name: Read the list of registered VMs
      command: prlctl list --all --output name --no-header
      register: vm_list
      changed_when: false

    - name: Stop the VMs
      command: prlctl stop {{ item }}
      loop: "{{ vm_list.stdout_lines }}"
      ignore_errors: true

    - name: Get info on the VMs
      command: prlctl list --info {{ item }}
      loop: "{{ vm_list.stdout_lines }}"
      register: vm_info_list_cmd

    - name: Get the executor VM's path
      set_fact:
        vm_executor_path: "{{ item.stdout | regex_search('Home:\\s+([^\\s]+)', '\\1') | first }}"
      when: vm_list.stdout_lines[vm_index] == gitlab_executor.vm_name
      loop: "{{ vm_info_list_cmd.results }}"
      loop_control:
        label: "{{ item.item }}"
        index_var: vm_index

    - name: Get the non-executor VM's paths
      set_fact:
        vm_non_executor_paths: "{{ vm_non_executor_paths|default([]) + (item.stdout | regex_search('Home:\\s+([^\\s]+)', '\\1')) }}"
      when: vm_list.stdout_lines[vm_index] != gitlab_executor.vm_name
      loop: "{{ vm_info_list_cmd.results }}"
      loop_control:
        label: "{{ item.item }}"
        index_var: vm_index

    - name: Unregister all VMs
      command: prlctl unregister {{ item }}
      loop: "{{ vm_list.stdout_lines }}"

    - name: Delete non-executor VMs
      file:
        dest: "{{ item }}"
        state: absent
      loop: "{{ vm_non_executor_paths | default([]) }}"

    - name: Find non-registered VMs
      find:
        paths:
          - /var/gitlab-runner/vms
          - "{{ root_parallels_home }}"
        patterns: "*.pvm"
        excludes: "{{ gitlab_executor.vm_name }}.pvm"
        file_type: directory
      register: vm_non_registered_paths

    - name: Delete non-registered VMs
      file:
        dest: "{{ item.path }}"
        state: absent
      loop: "{{ vm_non_registered_paths.files }}"
      loop_control:
        label: "{{ item.path }}"

- name: Create executor VM
  become: true
  block:
    - name: Create Parallels vm home directory
      file:
        path: "{{ root_parallels_home }}"
        state: directory
        owner: root
        group: admin
        mode: 'u=rwx,g=,o='

    - name: Check if the VM file is already there
      stat:
        path: /var/gitlab-runner/vms/{{ gitlab_executor.vm_name }}.pvm
      register: runner_vm

    - name: Determine if we need to install the VM
      set_fact:
        install_vm: "{{ force_vm_update or (not runner_vm.stat.exists) }}"

    - name: Download and install VM
      when: install_vm
      block:
        - name: Delete existing VM
          file:
            dest: "{{ item }}"
            state: absent
          loop:
            - /tmp/{{ gitlab_executor.vm_name }}.pvm.tgz
            - /var/gitlab-runner/vms/{{ gitlab_executor.vm_name }}.pvm

        - name: Download VM archive
          get_url:
            url: "{{ vm_base_url }}/{{ gitlab_executor.vm_name }}.pvm.tgz"
            dest: /tmp/{{ gitlab_executor.vm_name }}.pvm.tgz
            checksum: "sha256:{{ gitlab_executor.vm_checksum }}"
            owner: root
            group: admin
            mode: 'u=rw,g=r,o=r'
          notify: cleanup-downloaded-vm

        # We don't use the unarchive module, because it calls GNU tar, *not* the tar installed by default on macOS.
        # This results in extra files with leading underscores being created, which are strangely reminiscent
        # of the old AppleDouble format.
        - name: Decompress VM archive
          command:
            argv:
              - tar
              - -xzf
              - /tmp/{{ gitlab_executor.vm_name }}.pvm.tgz
              - -C
              - /var/gitlab-runner/vms
              - --uname
              - root
              - --gname
              - admin

    - name: Register VM
      command:
        argv:
          - prlctl
          - register
          - /var/gitlab-runner/vms/{{ gitlab_executor.vm_name }}.pvm
