---

# - name: Gitlab runner user
#   become: true
#   block:
#     - name: Gitlab runner group
#       group:
#         name: "{{ runner_user }}"
#
#     - name: Gitlab runner user
#       user:
#         name: "{{ runner_user }}"
#         # password: "{{ runner_password }}"
#         password: "temp"
#         comment: GitLab Runner
#         groups:
#           - "{{ runner_user }}"
#         hidden: true
#         shell: /bin/bash
#       register: gitlab_runner_user

    # - name: Get Gitlab runner user's UID
    #   set_fact:
    #     runner_uid: "{{ gitlab_runner_user.uid }}"

    # - name: Gitlab runner directories
    #   file:
    #     path: /Users/{{ runner_user }}/{{ item }}
    #     state: directory
    #     owner: "{{ runner_user }}"
    #     group: "{{ runner_user }}"
    #     mode: 'u=rwx,g=rx,o=rx'
    #   loop:
    #     - .gitlab-runner
    #     - Parallels
    #     - bin
    #     - certs
    #     - etc
    #     - log
    #     - playbook
    #     - work
    #
    # - name: Copy certificates
    #   copy:
    #     src: "{{ item }}.p12"
    #     dest: /Users/{{ runner_user }}/certs/{{ item }}.p12
    #     owner: "{{ runner_user }}"
    #     group: "{{ runner_user }}"
    #     mode: 'u=r,g=,o='
    #   loop:
    #     - developer-id-application
    #     - developer-id-installer
    #
    # - name: Copy user playbook
    #   template:
    #     src: "runner-user/{{ item }}"
    #     dest: /Users/{{ runner_user }}/playbook
    #     owner: "{{ runner_user }}"
    #     group: "{{ runner_user }}"
    #     mode: 'u=rw,g=,o='
    #   loop:
    #     - user-playbook.yaml
    #     - user-inventory.yaml
    #     - ansible.cfg
    #
    # - name: Copy user playbook script
    #   template:
    #     src: runner-user/run-user-playbook.sh
    #     dest: /Users/{{ runner_user }}/playbook
    #     owner: "{{ runner_user }}"
    #     group: "{{ runner_user }}"
    #     mode: 'u=rwx,g=,o='

# - name: Determine Gitlab runner service status
#   block:
#     - name: Set escaped runner service line regex
#       set_fact:
#         runner_service_line_regex: "{{ '([-0-9]+)\\s+([0-9]+)\\s+' + (runner_service_label | regex_escape) }}"
#
#     - name: Read the list of launchd services
#       command: launchctl list
#       register: launchctl_list
#       changed_when: false
#
#     - name: Find the runner service
#       set_fact:
#         runner_service_line: "{{ launchctl_list.stdout | default('') | regex_search(runner_service_line_regex) | default('') }}"
#
#     - debug:
#         msg: "runner_service_line = {{ runner_service_line }}"
#
#     - name: Find the runner service's pid 1 / 2
#       set_fact:
#         runner_service_pid: "{{ runner_service_line | regex_search(runner_service_line_regex, '\\1') | first }}"
#       when: runner_service_line != ""
#
#     - name: Find the runner service's pid 1 / 2
#       set_fact:
#         runner_service_pid: "{{ runner_service_pid | default('') }}"
#
#     - debug:
#         msg: "runner_service_pid = {{ runner_service_pid }}"
#
#     - name: Set runner predicates
#       set_fact:
#         # is_runner_registered: "{{ runner_service_pid != '' }}"
#         is_runner_running: "{{ runner_service_pid != '' and runner_service_pid != '-' }}"
#
#     - debug:
#         msg: "is_runner_running = {{ is_runner_running }}"

# - name: Stop runner service
#   community.general.launchd:
#     name: "{{ runner_service_label }}"
#     state: stopped
#   when: is_runner_running

- name: Runner directories
  become: true
  block:
    - name: Create runner log directory
      file:
        path: /var/log/gitlab-runner
        state: directory
        owner: root
        group: admin
        mode: 'u=rwx,g=rx,o='

    - name: Create runner conf directories
      file:
        path: /etc/{{ item }}
        state: directory
        owner: root
        group: admin
        mode: 'u=rwx,g=rx,o='
      loop:
        - gitlab-runner
        - gitlab-runner/certificates
        - gitlab-runner/registration

    - name: Copy certificates
      copy:
        src: "{{ item }}.p12"
        dest: /etc/gitlab-runner/certificates/{{ item }}.p12
        owner: root
        group: admin
        mode: 'u=r,g=,o='
      loop:
        - developer-id-application
        - developer-id-installer

    - name: Create runner work directories
      file:
        path: /var/{{ item }}
        state: directory
        owner: root
        group: admin
        mode: 'u=rwx,g=rx,o='
      loop:
        - gitlab-runner
        - gitlab-runner/work
        - gitlab-runner/vms

- name: Install runner software
  become: true
  block:
    - name: Check if runner is already installed
      stat:
        path: /usr/local/bin/gitlab-runner
      register: gitlab_runner

    - name: Call runner version
      command:
        cmd: /usr/local/bin/gitlab-runner --version
      when: gitlab_runner.stat.exists
      register: current_runner_version_reg
      changed_when: false

    - name: Determine current runner version 1 / 2
      set_fact:
        current_runner_version: "{{ current_runner_version_reg.stdout | default('') | regex_search('Version:[\\s]+([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | first }}"
      when: gitlab_runner.stat.exists

    - name: Determine current runner version 2 / 2
      set_fact:
        current_runner_version: "{{ current_runner_version | default('') }}"

    - name: Determine whether we need to (re-)install the runner
      set_fact:
        need_runner_install: "{{ not gitlab_runner.stat.exists or (gitlab_runner_version != (current_runner_version | default(''))) }}"

    - name: Install runner {{ gitlab_runner_version }}
      get_url:
        url: https://gitlab-runner-downloads.s3.amazonaws.com/v{{ gitlab_runner_version }}/binaries/gitlab-runner-darwin-amd64
        dest: /usr/local/bin/gitlab-runner
        checksum: "sha256:{{ gitlab_runner_hash }}"
        owner: root
        group: admin
        mode: 'u=rwx,g=rx,o=rx'
      when: need_runner_install

# - name: Register per-project runners
#   block:
#     - name: Check if per-project runners are already registered
#       become: true
#       stat:
#         path: /etc/gitlab-runner/registration/project.{{ item.id }}.json
#       loop: "{{ gitlab_macos_projects }}"
#       loop_control:
#         label: "{{ item.name }}"
#         index_var: index
#       register: runner_registered
#
#     - name: Register per-project runners
#       gitlab_runner:
#         description: "{{ gitlab_runner_description }}"
#         api_token: "{{ item.access_token | trim }}"
#         registration_token: "{{ item.registration_token | trim }}"
#         project: "{{ item.id }}"
#         access_level: not_protected
#         api_url: https://gitlab.com/
#         state: present
#         active: true
#         tag_list:
#           - ticksmith-macos
#         run_untagged: false
#         locked: false
#       loop: "{{ gitlab_macos_projects }}"
#       loop_control:
#         label: "{{ item.name }}"
#         index_var: index
#       when: not runner_registered.results[index].stat.exists
#       register: runner_registration
#
#     - name: Record per-project runner registrations
#       become: true
#       copy:
#         content: "{{ runner_registration.results[index].runner }}"
#         dest: /etc/gitlab-runner/registration/project.{{ item.id }}.json
#         owner: root
#         group: admin
#         mode: 'u=rw,g=,o='
#       loop: "{{ gitlab_macos_projects }}"
#       loop_control:
#         label: "{{ item.name }}"
#         index_var: index
#       when: not runner_registered.results[index].stat.exists
#
#     - name: Read per-project runner registrations
#       become: true
#       shell:
#         cmd: jq --slurp '.' project.*.json
#         chdir: /etc/gitlab-runner/registration
#       register: runner_per_project_registrations_raw
#       changed_when: false
#
#     - name: Set runner_per_project_registrations
#       set_fact:
#         runner_per_project_registrations: "{{ runner_per_project_registrations_raw.stdout | from_json }}"

- name: Runner configuration
  become: true
  block:
    - name: Read Developer ID Application certificate
      command: base64 --input /etc/gitlab-runner/certificates/developer-id-application.p12
      register: apple_developer_id_application_certificate
      changed_when: false

    - name: Read Developer ID Installer certificate
      command: base64 --input /etc/gitlab-runner/certificates/developer-id-installer.p12
      register: apple_developer_id_installer_certificate
      changed_when: false

    # - name: Create runner config file
    #   template:
    #     src: config.toml
    #     dest: /etc/gitlab-runner/config.toml
    #     owner: root
    #     group: admin
    #     mode: 'u=rw,g=,o='
    #
# - name: Runner VM
#   become: true
#   block:
#     - name: Check if the VM file is already there
#       stat:
#         path: /var/gitlab-runner/vms/{{ gitlab_executor.vm_name }}.pvm
#       register: runner_vm
#
#     - name: Download VM
#       get_url:
#         url: "{{ vm_base_url }}/{{ gitlab_executor.vm_name }}.tgz"
#         dest: /tmp/{{ gitlab_executor.vm_name }}.tgz
#         checksum: "sha256:{{ gitlab_executor.vm_checksum }}"
#         owner: root
#         group: admin
#         mode: 'u=rw,g=r,o=r'
#       when: not runner_vm.stat.exists
#       notify: cleanup-downloaded-vm
#
#     # We don't use the unarchive module, because it calls GNU tar, *not* the tar installed by default on macOS.
#     # This results in extra files with leading underscores being created, which are strangely reminiscent
#     # of the old AppleDouble format.
#     - name: Decompress VM
#       command:
#         cmd: tar -xzf /tmp/{{ gitlab_executor.vm_name }}.tgz -C /var/gitlab-runner/vms --uname root --gname admin
#         creates: /var/gitlab-runner/vms/{{ gitlab_executor.vm_name }}.pvm
#
#     - name: Read the list of VMs
#       command: prlctl list --all --output name
#       register: prlctl_list
#       changed_when: false
#
#     - name: Is the executor VM registered?
#       set_fact:
#         is_vm_registered: "{{ prlctl_list.stdout.find(gitlab_executor.gitlab_executor.vm_name) != -1 }}"
#
#     - debug:
#         msg: "is_vm_registered = {{ is_vm_registered }}"
#
#     - name: Register the executor VM
#       command: prlctl register /var/gitlab-runner/vms/{{ gitlab_executor.vm_name }}.pvm
#       when: not is_vm_registered

# - name: Create launchd config file
#   become: true
#   template:
#     src: launch-daemon.xml
#     dest: /Library/LaunchDaemons/{{ runner_service_label }}.plist
#     owner: root
#     group: wheel
#     mode: 'u=rw,g=r,o=r'

# - name: Start runner service
#   community.general.launchd:
#     name: "{{ runner_service_label }}"
#     state: started
